To demonstrate, let's use `module list`. `module list` shows all loaded software modules.

```
{{ site.remote.prompt }} module list
```
{: .bash}

```
Currently Loaded Modules:
  1) nixpkgs/16.09   (S)      4) icc/.2016.4.258   (H)   7) openmpi/2.1.1 (m)
  2) imkl/11.3.4.258 (math)   5) ifort/.2016.4.258 (H)   8) StdEnv/2016.4 (S)
  3) gcccore/.5.4.0  (H)      6) intel/2016.4      (t)   9) python/3.7.4  (t)

[Some output removed for clarity]
```
{: .output}

```
{{ site.remote.prompt }} module load beast
{{ site.remote.prompt }} module list
```
{: .bash}

```

Currently Loaded Modules:
  1) nixpkgs/16.09   (S)      5) ifort/.2016.4.258 (H)   9) python/3.7.4     (t)
  2) imkl/11.3.4.258 (math)   6) intel/2016.4      (t)  10) java/1.8.0_121   (t)
  3) gcccore/.5.4.0  (H)      7) openmpi/2.1.1     (m)  11) beagle-lib/2.1.2 (bio)
  4) icc/.2016.4.258 (H)      8) StdEnv/2016.4     (S)  12) beast/2.4.0      (bio)

[Some output removed for clarity]
```
{: .output}

So in this case, loading the `beast` module (a bioinformatics software package), also loaded
`java/1.8.0_121` and `beagle-lib/2.1.2` as well. Let's try unloading the `beast` package.

```
{{ site.remote.prompt }} module unload beast
{{ site.remote.prompt }} module list
```
{: .bash}

```
Currently Loaded Modules:
  1) nixpkgs/16.09   (S)      4) icc/.2016.4.258   (H)   7) openmpi/2.1.1 (m)
  2) imkl/11.3.4.258 (math)   5) ifort/.2016.4.258 (H)   8) StdEnv/2016.4 (S)
  3) gcccore/.5.4.0  (H)      6) intel/2016.4      (t)   9) python/3.7.4  (t)

[Some output removed for clarity]
```
{: .output}

So using `module unload` "un-loads" a module along with its dependencies. If we wanted to unload
everything at once, we could run `module purge` (unloads everything).

```
{{ site.remote.prompt }} module purge
```
{: .bash}

```
The following modules were not unloaded:
  (Use "module --force purge" to unload all):

  1) StdEnv/2016.4   3) imkl/11.3.4.258   5) icc/.2016.4.258     7) intel/2016.4
  2) nixpkgs/16.09   4) gcccore/.5.4.0    6) ifort/.2016.4.258   8) openmpi/2.1.1
```
{: .output}

Note that `module purge` is informative. It lets us know that all but a default set of packages 
have been unloaded (and how to actually unload these if we truly so desired).
