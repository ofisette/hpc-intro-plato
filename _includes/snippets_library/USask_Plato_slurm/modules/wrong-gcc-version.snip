Let's take a closer look at the `gcc` module. GCC is an extremely widely used C/C++/Fortran
compiler. Tons of software is dependent on the GCC version, and might not compile or run if the
wrong version is loaded. In this case, several versions are available.
How do we load each one and which one is the default?

In this case, `gcc/9.3.0` has a `(D)` next to it. This indicates that it is the default - if we type
`module load gcc`, this is the version that will be loaded.

```
{{ site.remote.prompt }} module load gcc
{{ site.remote.prompt }} gcc --version
```
{: .bash}

```
Lmod is automatically replacing "intel/2020.1.217" with "gcc/9.3.0".

Due to MODULEPATH changes, the following have been reloaded:
  1) openmpi/4.0.3

gcc (GCC) 9.3.0
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```
{: .output}

Note that three things happened: the default version of GCC was loaded (version 9.3.0), the Intel
compilers (which conflict with GCC) were unloaded, and software that is dependent on compiler
(OpenMPI) was reloaded. The `module` system turned what might be a super-complex operation into a
single command.

So how do we load a non-default version of a software package? In this case, the
only change we need to make is be more specific about the module we are loading
by leaving in the version number after the `/`.

```
{{ site.remote.prompt }} module load gcc/10.2.0
{{ site.remote.prompt }} gcc --version
```
{: .bash}

```
Inactive Modules:
  1) openmpi

The following have been reloaded with a version change:
  1) gcc/9.3.0 => gcc/10.2.0     2) gcccore/.9.3.0 => gcccore/.10.2.0

gcc (GCC) 10.2.0
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```
{: .output}

We now have successfully switched from GCC 9.3.0 to GCC 10.2.0. Because OpenMPI
is not available for that specific version of GCC, its module was inactivated.
